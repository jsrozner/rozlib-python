from typing import List, Optional, Iterator


class Lemma:
    def name(self) -> str: ...
    def key(self) -> str: ...
    def synset(self) -> "Synset": ...
    def antonyms(self) -> List["Lemma"]: ...
    def derivationally_related_forms(self) -> List["Lemma"]: ...
    def pertainyms(self) -> List["Lemma"]: ...

class Synset:
    def name(self) -> str: ...
    def definition(self) -> str: ...
    def examples(self) -> List[str]: ...
    def lemmas(self) -> List[Lemma]: ...
    def hypernyms(self) -> List["Synset"]: ...
    def hyponyms(self) -> List["Synset"]: ...
    def part_meronyms(self) -> List["Synset"]: ...
    def substance_meronyms(self) -> List["Synset"]: ...
    def similar_tos(self) -> List["Synset"]: ...
    def root_hypernyms(self) -> List["Synset"]: ...

def synset(name: str) -> Synset: ...
def all_synsets(pos: Optional[str] = None) -> Iterator[Synset]: ...
def lemma(name: str) -> Lemma: ...
def lemmas(name: str, pos: Optional[str] = None) -> List[Lemma]: ...
def wordnet_ic() -> None: ...  # You could add types for information content
